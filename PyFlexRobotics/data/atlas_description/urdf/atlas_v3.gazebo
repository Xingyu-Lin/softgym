<robot name="drc_skeleton">
  <gazebo>
    <!-- robot model offset -->
    <pose>0 0 0.93 0 0 0</pose>
  </gazebo>
  <gazebo>
    <plugin name="atlas_plugin" filename="libAtlasV3Plugin.so"/>
    <plugin filename="libgazebo_ros_joint_pose_trajectory.so" name="joint_trajectory_plugin">
      <topicName>joint_trajectory</topicName>
      <updateRate>1000.0</updateRate>
    </plugin>
    <!--
    <plugin filename="libgazebo_ros_controller_manager.so" name="gazebo_ros_controller_manager">
      <alwaysOn>true</alwaysOn>
      <updateRate>1000.0</updateRate>
    </plugin>
    -->
  </gazebo>
  <!-- imu -->
  <link name="imu_link">
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
  </link>
  <joint name="imu_joint" type="fixed">
    <parent link="pelvis"/>
    <child link="imu_link"/>
    <origin xyz="0.05991527603 0 -0.01415" rpy="0 0 0"/>
  </joint>
  <gazebo reference="imu_link">
    <!-- this is expected to be reparented to pelvis with appropriate offset
         when imu_link is reduced by fixed joint reduction -->
    <!-- todo: this is working with gazebo 1.4, need to write a unit test -->
    <sensor name="imu_sensor" type="imu">
      <always_on>1</always_on>
      <update_rate>1000.0</update_rate>
      <imu>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters from Boston Dynamics
               (http://gazebosim.org/wiki/Sensor_noise):
                 rates (rad/s): mean=0, stddev=2e-4
                 accels (m/s/s): mean=0, stddev=1.7e-2
                 rate bias (rad/s): 5e-6 - 1e-5
                 accel bias (m/s/s): 1e-1
               Experimentally, simulation provide rates with noise of
               about 1e-3 rad/s and accels with noise of about 1e-1 m/s/s.
               So we don't expect to see the noise unless number of inner iterations
               are increased.

               We will add bias.  In this model, bias is sampled once for rates
               and once for accels at startup; the sign (negative or positive)
               of each bias is then switched with equal probability.  Thereafter,
               the biases are fixed additive offsets.  We choose
               bias means and stddevs to produce biases close to the provided
               data. -->
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo>
  <gazebo reference="l_arm_wrx">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <gazebo reference="r_arm_wrx">
    <provideFeedback>1</provideFeedback>
  </gazebo>
  <gazebo reference="l_leg_akx">
    <provideFeedback>1</provideFeedback>
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_akx">
    <provideFeedback>1</provideFeedback>
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_foot">
    <!-- kp and kd for rubber -->
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="l_foot">
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="l_clav">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_farm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_hand">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_larm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_lglut">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_lleg">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_scap">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_talus">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_uarm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_uglut">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="l_uleg">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="ltorso">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="mtorso">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="pelvis">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_clav">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_farm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_hand">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_larm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_lglut">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_lleg">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_scap">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_talus">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_uarm">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_uglut">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="r_uleg">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo reference="utorso">
    <mu1>0.9</mu1>
    <mu2>0.9</mu2>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_p3d.so" name="gazebo_ros_p3d">
      <bodyName>pelvis</bodyName>
      <topicName>/ground_truth_odom</topicName>
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
    </plugin>
  </gazebo>

  <!-- foot contact sensors -->
  <gazebo reference="r_foot">
    <!-- contact sensor -->
    <sensor type="contact" name="r_foot_contact_sensor">
      <update_rate>1000.0</update_rate>
      <always_on>1</always_on>
      <contact>
        <collision>r_foot_collision</collision>
        <topic>/r_foot_contact</topic>
      </contact>
    </sensor>
  </gazebo>
  <gazebo reference="l_foot">
    <!-- contact sensor -->
    <sensor type="contact" name="l_foot_contact_sensor">
      <update_rate>1000.0</update_rate>
      <always_on>1</always_on>
      <contact>
        <collision>l_foot_collision</collision>
        <topic>/l_foot_contact</topic>
      </contact>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_force.so" name="gazebo_ros_force">
      <bodyName>pelvis</bodyName>
      <topicName>/atlas/apply_pelvis_force</topicName>
    </plugin>
  </gazebo>


  <gazebo reference="back_bkz">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="back_bky">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="back_bkx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_elx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_ely">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_wrx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_shx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_shy">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_arm_wry">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_leg_kny">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_leg_hpy">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_leg_hpx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_leg_aky">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="l_leg_hpz">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="neck_ry">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_elx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_ely">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_wrx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_shx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_shy">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_arm_wry">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_kny">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_hpy">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_hpx">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_aky">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_leg_hpz">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>

  <!-- new situational awareness cameras -->
  <gazebo reference="r_situational_awareness_camera_link">
    <sensor type="camera" name="r_situational_awareness_camera_sensor">
      <update_rate>60.0</update_rate>
      <camera name="r_situational_awareness_camera">
        <pose>0 0 0 0 0 0</pose>
        <!-- Spec sheet says 185deg HFOV @ 1280x1024pi @ 60 hz.
             Don't think most GPU's can achieve this at real-time right now.
        <horizontal_fov>3.22885912</horizontal_fov>
        -->
        <horizontal_fov>2.0</horizontal_fov>
        <image>
          <width>1280</width>
          <height>1024</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1].
               The stddev value of 0.007 is based on experimental data 
               from a camera in a Sandia hand pointed at a static scene
               in a couple of different lighting conditions.  -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="r_situational_awareness_camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>r_situational_awareness_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>r_situational_awareness_camera_optical_frame</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="l_situational_awareness_camera_link">
    <sensor type="camera" name="l_situational_awareness_camera_sensor">
      <update_rate>60.0</update_rate>
      <camera name="l_situational_awareness_camera">
        <pose>0 0 0 0 0 0</pose>
        <!-- Spec sheet says 185deg HFOV @ 1280x1024pi @ 60 hz.
             Don't think most GPU's can achieve this at real-time right now.
        <horizontal_fov>3.22885912</horizontal_fov>
        -->
        <horizontal_fov>2.0</horizontal_fov>
        <image>
          <width>1280</width>
          <height>1024</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1].
               The stddev value of 0.007 is based on experimental data 
               from a camera in a Sandia hand pointed at a static scene
               in a couple of different lighting conditions.  -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="l_situational_awareness_camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>l_situational_awareness_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>l_situational_awareness_camera_optical_frame</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="rear_situational_awareness_camera_link">
    <!-- Rear situational awareness camera is a D-Link DCS-2310L camera.
         Specs taken from website:
         http://www.dlink.com/us/en/home-solutions/view/network-cameras/dcs-2310l-outdoor-hd-poe-day-night-cloud-camera
         FOV: (H)57.8 deg, (V)37.8 deg, (D)66.0 deg
         Avalilable Resolutions:
           16:9 - 1280 x 800, 1280 x 720, 800 x 450, 640 x 360, 480 x 270, 320 x 176, 176 x 144 up to 30 fps recording1
           4:3 - 1024 x 768, 800 x 600, 640 x 480, 480 x 360, 320 x 240, 176 x 144 up to 30 fps recording1 
        -->
    <sensor type="camera" name="rear_situational_awareness_camera_sensor">
      <update_rate>30.0</update_rate>
      <camera name="rear_situational_awareness_camera">
        <pose>0 0 0 0 0 0</pose>
        <horizontal_fov>1.0</horizontal_fov>
        <image>
          <width>1280</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1].
               The stddev value of 0.007 is based on experimental data 
               from a camera in a Sandia hand pointed at a static scene
               in a couple of different lighting conditions.  -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="rear_situational_awareness_camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rear_situational_awareness_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>rear_situational_awareness_camera_optical_frame</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</robot>
