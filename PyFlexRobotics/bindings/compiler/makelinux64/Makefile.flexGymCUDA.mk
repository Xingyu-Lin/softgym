# Makefile generated by XPJ for linux64
-include Makefile.custom
ProjectName = flexGymCUDA
flexGymCUDA_cppfiles   += ./../../BvhLoader.cpp
flexGymCUDA_cppfiles   += ./../../imgui.cpp
flexGymCUDA_cppfiles   += ./../../main.cpp
flexGymCUDA_cppfiles   += ./../../Skeleton.cpp
flexGymCUDA_cfiles   += ./../../../external/jrs/predicates.c
flexGymCUDA_cppfiles   += ./../../../external/tinyxml2/tinyxml2.cpp
flexGymCUDA_cppfiles   += ./../../../external/rl/RLFlexEnv.cpp
flexGymCUDA_cppfiles   += ./../../vr/vr.cpp
flexGymCUDA_cppfiles   += ./../../../external/rl/IsaacCommon/IsaacIPC.cpp
flexGymCUDA_cppfiles   += ./../../../external/rl/IsaacCommon/IsaacUtil.cpp
flexGymCUDA_cppfiles   += ./../../../external/rl/IsaacSim/IPCServerTask_Linux.cpp
flexGymCUDA_cppfiles   += ./../../../external/rl/IsaacSim/IPCServerTask_Windows.cpp
flexGymCUDA_cppfiles   += ./../../opengl/imguiRenderGL.cpp
flexGymCUDA_cppfiles   += ./../../opengl/shader.cpp
flexGymCUDA_cppfiles   += ./../../opengl/shadersGL.cpp
flexGymCUDA_cppfiles   += ./../../../core/aabbtree.cpp
flexGymCUDA_cppfiles   += ./../../../core/core.cpp
flexGymCUDA_cppfiles   += ./../../../core/extrude.cpp
flexGymCUDA_cppfiles   += ./../../../core/maths.cpp
flexGymCUDA_cppfiles   += ./../../../core/mesh.cpp
flexGymCUDA_cppfiles   += ./../../../core/perlin.cpp
flexGymCUDA_cppfiles   += ./../../../core/pfm.cpp
flexGymCUDA_cppfiles   += ./../../../core/platform.cpp
flexGymCUDA_cppfiles   += ./../../../core/png.cpp
flexGymCUDA_cppfiles   += ./../../../core/sdf.cpp
flexGymCUDA_cppfiles   += ./../../../core/tga.cpp
flexGymCUDA_cppfiles   += ./../../../core/voxelize.cpp
flexGymCUDA_cuda_gym_cuda_reward_cu   += ./../../gym/cuda/reward.cu

flexGymCUDA_cpp_release_dep    = $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(flexGymCUDA_cppfiles)))))
flexGymCUDA_cc_release_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.release.P, $(flexGymCUDA_ccfiles)))))
flexGymCUDA_c_release_dep      = $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(flexGymCUDA_cfiles)))))
flexGymCUDA_release_dep      = $(flexGymCUDA_cpp_release_dep) $(flexGymCUDA_cc_release_dep) $(flexGymCUDA_c_release_dep)
-include $(flexGymCUDA_release_dep)
flexGymCUDA_cpp_debug_dep    = $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.P, $(flexGymCUDA_cppfiles)))))
flexGymCUDA_cc_debug_dep    = $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.debug.P, $(flexGymCUDA_ccfiles)))))
flexGymCUDA_c_debug_dep      = $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.P, $(flexGymCUDA_cfiles)))))
flexGymCUDA_debug_dep      = $(flexGymCUDA_cpp_debug_dep) $(flexGymCUDA_cc_debug_dep) $(flexGymCUDA_c_debug_dep)
-include $(flexGymCUDA_debug_dep)
flexGymCUDA_release_hpaths    := 
flexGymCUDA_release_hpaths    += /usr/local/cuda/include
flexGymCUDA_release_hpaths    += /usr/local/cuda/extras/cupti/include
flexGymCUDA_release_hpaths    += ./../../..
flexGymCUDA_release_lpaths    := 
flexGymCUDA_release_lpaths    += /usr/local/cuda/lib64
flexGymCUDA_release_lpaths    += ./../../../lib/linux64
flexGymCUDA_release_defines   := $(flexGymCUDA_custom_defines)
flexGymCUDA_release_libraries := 
flexGymCUDA_release_libraries += :NvFlexExtReleaseCUDA_x64.a
flexGymCUDA_release_libraries += :NvFlexReleaseCUDA_x64.a
flexGymCUDA_release_libraries += :NvFlexExtReleaseCUDA_x64.a
flexGymCUDA_release_libraries += :libSDL2.a
flexGymCUDA_release_libraries += :libSDL2main.a
flexGymCUDA_release_common_cflags	:= $(flexGymCUDA_custom_cflags)
flexGymCUDA_release_common_cflags    += -MMD
flexGymCUDA_release_common_cflags    += $(addprefix -D, $(flexGymCUDA_release_defines))
flexGymCUDA_release_common_cflags    += $(addprefix -I, $(flexGymCUDA_release_hpaths))
flexGymCUDA_release_common_cflags  += -m64
flexGymCUDA_release_common_cflags  += -Wall -std=c++0x -fPIC -fpermissive -fno-strict-aliasing -DNV_FLEX_GYM
flexGymCUDA_release_common_cflags  += -O3 -ffast-math -DNDEBUG
flexGymCUDA_release_cflags	:= $(flexGymCUDA_release_common_cflags)
flexGymCUDA_release_cppflags	:= $(flexGymCUDA_release_common_cflags)
flexGymCUDA_release_lflags    := $(flexGymCUDA_custom_lflags)
flexGymCUDA_release_lflags    += $(addprefix -L, $(flexGymCUDA_release_lpaths))
flexGymCUDA_release_lflags    += -Wl,--start-group $(addprefix -l, $(flexGymCUDA_release_libraries)) -Wl,--end-group
flexGymCUDA_release_lflags  += -g -L/usr/lib -L"../../../lib/linux64" -L../../../external/SDL2-2.0.4/lib/x64/ -L/usr/local/cuda/lib64 -lGL -lEGL -lcudart_static -ldl -lrt -pthread -lcudadevrt
flexGymCUDA_release_lflags  += -m64
flexGymCUDA_release_objsdir  = $(OBJS_DIR)/flexGymCUDA_release
flexGymCUDA_release_cpp_o    = $(addprefix $(flexGymCUDA_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(flexGymCUDA_cppfiles)))))
flexGymCUDA_release_cc_o    = $(addprefix $(flexGymCUDA_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(flexGymCUDA_ccfiles)))))
flexGymCUDA_release_c_o      = $(addprefix $(flexGymCUDA_release_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(flexGymCUDA_cfiles)))))
flexGymCUDA_release_obj      = $(flexGymCUDA_release_cpp_o) $(flexGymCUDA_release_cc_o) $(flexGymCUDA_release_c_o)
flexGymCUDA_release_bin      := ./../../../bin/linux64/NvFlexGymReleaseCUDA_x64.so

clean_flexGymCUDA_release: 
	@$(ECHO) clean flexGymCUDA release
	@$(RMDIR) $(flexGymCUDA_release_objsdir)
	@$(RMDIR) $(flexGymCUDA_release_bin)
	@$(RMDIR) $(DEPSDIR)/flexGymCUDA/release

build_flexGymCUDA_release: postbuild_flexGymCUDA_release
postbuild_flexGymCUDA_release: mainbuild_flexGymCUDA_release
mainbuild_flexGymCUDA_release: prebuild_flexGymCUDA_release $(flexGymCUDA_release_bin)
prebuild_flexGymCUDA_release:

$(flexGymCUDA_release_bin): $(flexGymCUDA_release_obj) build_flexExtCUDA_release 
	mkdir -p `dirname ./../../../bin/linux64/NvFlexGymReleaseCUDA_x64.so`
	$(CXX) -shared $(flexGymCUDA_release_obj) $(flexGymCUDA_release_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

flexGymCUDA_release_DEPDIR = $(dir $(@))/$(*F)
$(flexGymCUDA_release_cpp_o): $(flexGymCUDA_release_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling release $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(flexGymCUDA_release_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cppfiles))))))
	cp $(flexGymCUDA_release_DEPDIR).d $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cppfiles))))).P; \
	  rm -f $(flexGymCUDA_release_DEPDIR).d

$(flexGymCUDA_release_cc_o): $(flexGymCUDA_release_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling release $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(flexGymCUDA_release_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_ccfiles))))))
	cp $(flexGymCUDA_release_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_ccfiles))))).release.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_ccfiles))))).release.P; \
	  rm -f $(flexGymCUDA_release_DEPDIR).d

$(flexGymCUDA_release_c_o): $(flexGymCUDA_release_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling release $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(flexGymCUDA_release_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cfiles))))))
	cp $(flexGymCUDA_release_DEPDIR).d $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_release_DEPDIR).d >> $(addprefix $(DEPSDIR)/flexGymCUDA/release/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_release_objsdir),, $@))), $(flexGymCUDA_cfiles))))).P; \
	  rm -f $(flexGymCUDA_release_DEPDIR).d

flexGymCUDA_debug_hpaths    := 
flexGymCUDA_debug_hpaths    += /usr/local/cuda/include
flexGymCUDA_debug_hpaths    += /usr/local/cuda/extras/cupti/include
flexGymCUDA_debug_hpaths    += ./../../..
flexGymCUDA_debug_lpaths    := 
flexGymCUDA_debug_lpaths    += /usr/local/cuda/lib64
flexGymCUDA_debug_lpaths    += ./../../../lib/linux64
flexGymCUDA_debug_defines   := $(flexGymCUDA_custom_defines)
flexGymCUDA_debug_libraries := 
flexGymCUDA_debug_libraries += :NvFlexExtDebugCUDA_x64.a
flexGymCUDA_debug_libraries += :NvFlexDebugCUDA_x64.a
flexGymCUDA_debug_libraries += :NvFlexExtDebugCUDA_x64.a
flexGymCUDA_debug_libraries += :libSDL2.a
flexGymCUDA_debug_libraries += :libSDL2main.a
flexGymCUDA_debug_common_cflags	:= $(flexGymCUDA_custom_cflags)
flexGymCUDA_debug_common_cflags    += -MMD
flexGymCUDA_debug_common_cflags    += $(addprefix -D, $(flexGymCUDA_debug_defines))
flexGymCUDA_debug_common_cflags    += $(addprefix -I, $(flexGymCUDA_debug_hpaths))
flexGymCUDA_debug_common_cflags  += -m64
flexGymCUDA_debug_common_cflags  += -Wall -std=c++0x -fPIC -fpermissive -fno-strict-aliasing -DNV_FLEX_GYM
flexGymCUDA_debug_common_cflags  += -g -O0
flexGymCUDA_debug_cflags	:= $(flexGymCUDA_debug_common_cflags)
flexGymCUDA_debug_cppflags	:= $(flexGymCUDA_debug_common_cflags)
flexGymCUDA_debug_lflags    := $(flexGymCUDA_custom_lflags)
flexGymCUDA_debug_lflags    += $(addprefix -L, $(flexGymCUDA_debug_lpaths))
flexGymCUDA_debug_lflags    += -Wl,--start-group $(addprefix -l, $(flexGymCUDA_debug_libraries)) -Wl,--end-group
flexGymCUDA_debug_lflags  += -g -L/usr/lib -L"../../../lib/linux64" -L../../../external/SDL2-2.0.4/lib/x64/ -L/usr/local/cuda/lib64 -lGL -lEGL -lcudart_static -ldl -lrt -pthread -lcudadevrt
flexGymCUDA_debug_lflags  += -m64
flexGymCUDA_debug_objsdir  = $(OBJS_DIR)/flexGymCUDA_debug
flexGymCUDA_debug_cpp_o    = $(addprefix $(flexGymCUDA_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cpp, %.cpp.o, $(flexGymCUDA_cppfiles)))))
flexGymCUDA_debug_cc_o    = $(addprefix $(flexGymCUDA_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.cc, %.cc.o, $(flexGymCUDA_ccfiles)))))
flexGymCUDA_debug_c_o      = $(addprefix $(flexGymCUDA_debug_objsdir)/, $(subst ./, , $(subst ../, , $(patsubst %.c, %.c.o, $(flexGymCUDA_cfiles)))))
flexGymCUDA_debug_obj      = $(flexGymCUDA_debug_cpp_o) $(flexGymCUDA_debug_cc_o) $(flexGymCUDA_debug_c_o)
flexGymCUDA_debug_bin      := ./../../../bin/linux64/NvFlexGymDebugCUDA_x64.so

clean_flexGymCUDA_debug: 
	@$(ECHO) clean flexGymCUDA debug
	@$(RMDIR) $(flexGymCUDA_debug_objsdir)
	@$(RMDIR) $(flexGymCUDA_debug_bin)
	@$(RMDIR) $(DEPSDIR)/flexGymCUDA/debug

build_flexGymCUDA_debug: postbuild_flexGymCUDA_debug
postbuild_flexGymCUDA_debug: mainbuild_flexGymCUDA_debug
mainbuild_flexGymCUDA_debug: prebuild_flexGymCUDA_debug $(flexGymCUDA_debug_bin)
prebuild_flexGymCUDA_debug:

$(flexGymCUDA_debug_bin): $(flexGymCUDA_debug_obj) build_flexExtCUDA_debug 
	mkdir -p `dirname ./../../../bin/linux64/NvFlexGymDebugCUDA_x64.so`
	$(CXX) -shared $(flexGymCUDA_debug_obj) $(flexGymCUDA_debug_lflags) -lc -o $@ 
	$(ECHO) building $@ complete!

flexGymCUDA_debug_DEPDIR = $(dir $(@))/$(*F)
$(flexGymCUDA_debug_cpp_o): $(flexGymCUDA_debug_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling debug $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cppfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(flexGymCUDA_debug_cppflags) -c $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cppfiles)) -o $@
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cppfiles))))))
	cp $(flexGymCUDA_debug_DEPDIR).d $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cppfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cpp.o,.cpp, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cppfiles))))).P; \
	  rm -f $(flexGymCUDA_debug_DEPDIR).d

$(flexGymCUDA_debug_cc_o): $(flexGymCUDA_debug_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling debug $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_ccfiles))...
	mkdir -p $(dir $(@))
	$(CXX) $(flexGymCUDA_debug_cppflags) -c $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_ccfiles)) -o $@
	mkdir -p $(dir $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_ccfiles))))))
	cp $(flexGymCUDA_debug_DEPDIR).d $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_ccfiles))))).debug.P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .cc.o,.cc, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_ccfiles))))).debug.P; \
	  rm -f $(flexGymCUDA_debug_DEPDIR).d

$(flexGymCUDA_debug_c_o): $(flexGymCUDA_debug_objsdir)/%.o:
	$(ECHO) flexGymCUDA: compiling debug $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cfiles))...
	mkdir -p $(dir $(@))
	$(CC) $(flexGymCUDA_debug_cflags) -c $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cfiles)) -o $@ 
	@mkdir -p $(dir $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cfiles))))))
	cp $(flexGymCUDA_debug_DEPDIR).d $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cfiles))))).P; \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(flexGymCUDA_debug_DEPDIR).d >> $(addprefix $(DEPSDIR)/flexGymCUDA/debug/, $(subst ./, , $(subst ../, , $(filter %$(strip $(subst .c.o,.c, $(subst $(flexGymCUDA_debug_objsdir),, $@))), $(flexGymCUDA_cfiles))))).P; \
	  rm -f $(flexGymCUDA_debug_DEPDIR).d

clean_flexGymCUDA:  clean_flexGymCUDA_release clean_flexGymCUDA_debug
	rm -rf $(DEPSDIR)

export VERBOSE
ifndef VERBOSE
.SILENT:
endif
